"""migrate_user_id_to_uuid

Revision ID: 7ffcbc4ef576
Revises: 8345f923b349
Create Date: 2025-10-31 15:13:15.867201

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7ffcbc4ef576'
down_revision: Union[str, Sequence[str], None] = '8345f923b349'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # --- PHASE 1: Drop Foreign Key Constraints ---
    op.drop_constraint('weekly_plans_user_id_fkey', 'weekly_plans', type_='foreignkey')
    op.drop_constraint('user_recipe_progress_user_id_fkey', 'user_recipe_progress', type_='foreignkey')

    # --- PHASE 2: Add Temporary UUID Columns ---
    from sqlalchemy.dialects import postgresql
    op.add_column('users', sa.Column('new_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('weekly_plans', sa.Column('new_user_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('user_recipe_progress', sa.Column('new_user_id', postgresql.UUID(as_uuid=True), nullable=True))

    # --- PHASE 3: Data Mapping ---
    import uuid
    conn = op.get_bind()
    users_table = sa.Table(
        'users', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('new_id', postgresql.UUID(as_uuid=True)),
        autoload_with=conn
    )
    # Generate UUIDs for all existing users
    user_migration_map = {
        int_id: uuid.uuid5(uuid.NAMESPACE_DNS, f'chefpath_uuid_salt:{int_id}')
        for (int_id,) in conn.execute(sa.select(users_table.c.id)).fetchall()
    }
    # Update users table
    for old_id, new_id in user_migration_map.items():
        conn.execute(users_table.update().where(users_table.c.id == old_id).values(new_id=new_id))

    # Update dependent tables
    weekly_plans_table = sa.Table('weekly_plans', sa.MetaData(), sa.Column('user_id', sa.Integer), sa.Column('new_user_id', postgresql.UUID), autoload_with=conn)
    for old_id, new_id in user_migration_map.items():
        conn.execute(weekly_plans_table.update().where(weekly_plans_table.c.user_id == old_id).values(new_user_id=new_id))

    user_progress_table = sa.Table('user_recipe_progress', sa.MetaData(), sa.Column('user_id', sa.Integer), sa.Column('new_user_id', postgresql.UUID), autoload_with=conn)
    for old_id, new_id in user_migration_map.items():
        conn.execute(user_progress_table.update().where(user_progress_table.c.user_id == old_id).values(new_user_id=new_id))

    # --- PHASE 4: Swap/Cleanup ---
    op.drop_column('users', 'id')
    op.drop_column('weekly_plans', 'user_id')
    op.drop_column('user_recipe_progress', 'user_id')

    op.alter_column('users', 'new_id', new_column_name='id', nullable=False)
    op.alter_column('weekly_plans', 'new_user_id', new_column_name='user_id', nullable=False)
    op.alter_column('user_recipe_progress', 'new_user_id', new_column_name='user_id', nullable=False)

    # --- PHASE 5: Reapply Constraints ---
    op.create_primary_key('users_pkey', 'users', ['id'])
    op.create_foreign_key('weekly_plans_user_id_fkey', 'weekly_plans', 'users', ['user_id'], ['id'])
    op.create_foreign_key('user_recipe_progress_user_id_fkey', 'user_recipe_progress', 'users', ['user_id'], ['id'])


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('weekly_plans', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('user_recipe_progress', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    # ### end Alembic commands ###
